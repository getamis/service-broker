// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/getamis/service-broker/broker/pb/protocol.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/getamis/service-broker/broker/pb/protocol.proto
	github.com/getamis/service-broker/broker/pb/types.proto

It has these top-level messages:
	Catalog
	Service
	Plan
	Instance
	Binding
	ServiceBindingRequest
	ServiceBindingResponse
	ServiceInstanceRequest
	ServiceInstanceResponse
	Credential
	LastOperation
	Empty
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Broker service

type BrokerClient interface {
	GetCatalog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Catalog, error)
	GetServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*ServiceInstanceResponse, error)
	CreateServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*ServiceInstanceResponse, error)
	RemoveServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*Empty, error)
	Bind(ctx context.Context, in *ServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBindingResponse, error)
	Unbind(ctx context.Context, in *ServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBindingResponse, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetCatalog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := grpc.Invoke(ctx, "/pb.Broker/GetCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GetServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*ServiceInstanceResponse, error) {
	out := new(ServiceInstanceResponse)
	err := grpc.Invoke(ctx, "/pb.Broker/GetServiceInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) CreateServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*ServiceInstanceResponse, error) {
	out := new(ServiceInstanceResponse)
	err := grpc.Invoke(ctx, "/pb.Broker/CreateServiceInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) RemoveServiceInstance(ctx context.Context, in *ServiceInstanceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Broker/RemoveServiceInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Bind(ctx context.Context, in *ServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBindingResponse, error) {
	out := new(ServiceBindingResponse)
	err := grpc.Invoke(ctx, "/pb.Broker/Bind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Unbind(ctx context.Context, in *ServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBindingResponse, error) {
	out := new(ServiceBindingResponse)
	err := grpc.Invoke(ctx, "/pb.Broker/Unbind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	GetCatalog(context.Context, *Empty) (*Catalog, error)
	GetServiceInstance(context.Context, *ServiceInstanceRequest) (*ServiceInstanceResponse, error)
	CreateServiceInstance(context.Context, *ServiceInstanceRequest) (*ServiceInstanceResponse, error)
	RemoveServiceInstance(context.Context, *ServiceInstanceRequest) (*Empty, error)
	Bind(context.Context, *ServiceBindingRequest) (*ServiceBindingResponse, error)
	Unbind(context.Context, *ServiceBindingRequest) (*ServiceBindingResponse, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_GetCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/GetCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetCatalog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GetServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/GetServiceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetServiceInstance(ctx, req.(*ServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_CreateServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).CreateServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/CreateServiceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).CreateServiceInstance(ctx, req.(*ServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_RemoveServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).RemoveServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/RemoveServiceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).RemoveServiceInstance(ctx, req.(*ServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Bind(ctx, req.(*ServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Broker/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Unbind(ctx, req.(*ServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalog",
			Handler:    _Broker_GetCatalog_Handler,
		},
		{
			MethodName: "GetServiceInstance",
			Handler:    _Broker_GetServiceInstance_Handler,
		},
		{
			MethodName: "CreateServiceInstance",
			Handler:    _Broker_CreateServiceInstance_Handler,
		},
		{
			MethodName: "RemoveServiceInstance",
			Handler:    _Broker_RemoveServiceInstance_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _Broker_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _Broker_Unbind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/getamis/service-broker/broker/pb/protocol.proto",
}

func init() {
	proto.RegisterFile("github.com/getamis/service-broker/broker/pb/protocol.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0x17, 0x95, 0x05, 0xc7, 0xdb, 0x40, 0x0f, 0xc6, 0xdb, 0x1e, 0xbc, 0xb9, 0x0b, 0x7a,
	0x10, 0xbc, 0xa8, 0x2d, 0x52, 0x3c, 0x09, 0x2b, 0x3e, 0x40, 0xb2, 0x0e, 0x31, 0xd8, 0x64, 0x62,
	0x32, 0x2d, 0xf4, 0x59, 0x7c, 0x59, 0xd9, 0x6d, 0xfd, 0x40, 0x7a, 0x59, 0xf4, 0x94, 0x3f, 0xff,
	0x8f, 0x1f, 0x09, 0x81, 0x2b, 0xeb, 0xe4, 0x65, 0x69, 0xea, 0x8e, 0x7d, 0x63, 0x49, 0xb4, 0x77,
	0xb9, 0xc9, 0x94, 0x56, 0xae, 0xa3, 0x33, 0x93, 0xf8, 0x95, 0x52, 0xb3, 0x3d, 0xa2, 0x69, 0x62,
	0x62, 0xe1, 0x8e, 0x17, 0xf5, 0x20, 0x70, 0x2f, 0x1a, 0x75, 0x39, 0x66, 0x2f, 0xeb, 0x48, 0x79,
	0x33, 0x3e, 0x7f, 0xdf, 0x87, 0x72, 0x3a, 0x24, 0x78, 0x0a, 0x30, 0x27, 0x99, 0x69, 0xd1, 0x0b,
	0xb6, 0x78, 0x58, 0x47, 0x53, 0xdf, 0xf9, 0x28, 0x6b, 0x75, 0xd4, 0xcb, 0xad, 0x5f, 0x15, 0xf8,
	0x00, 0x38, 0x27, 0x79, 0xdc, 0xd0, 0xef, 0x43, 0x16, 0x1d, 0x3a, 0x42, 0xd5, 0x97, 0x7e, 0x99,
	0x2d, 0xbd, 0x2d, 0x29, 0x8b, 0x3a, 0xd9, 0x99, 0xe5, 0xc8, 0x21, 0x53, 0x55, 0x60, 0x0b, 0x93,
	0x59, 0x22, 0x2d, 0xf4, 0x8f, 0xcc, 0x1b, 0x98, 0xb4, 0xe4, 0x79, 0x35, 0x8a, 0xf9, 0xfd, 0xe6,
	0xaa, 0xc0, 0x6b, 0x38, 0x98, 0xba, 0xf0, 0x8c, 0xc7, 0x3f, 0x06, 0xbd, 0xe1, 0x82, 0xfd, 0xec,
	0xab, 0x5d, 0xd1, 0xd7, 0x15, 0x6e, 0xa1, 0x7c, 0x0a, 0xe6, 0x2f, 0x08, 0x53, 0x0e, 0x9f, 0x74,
	0xf1, 0x11, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xcc, 0x5e, 0xc8, 0x1f, 0x02, 0x00, 0x00,
}
